name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history to allow branch operations
          token: ${{ secrets.PAT_TOKEN }}  # Use PAT for authentication

      - name: Debug directory contents
        run: |
          pwd
          ls -la
          find . -type f
        shell: bash

      - name: Verify go.mod and main.go
        run: |
          if [ ! -f go.mod ]; then
            echo "Error: go.mod not found"
            exit 1
          fi
          if [ ! -f cmd/kindctl/main.go ]; then
            echo "Error: cmd/kindctl/main.go not found"
            exit 1
          fi
          echo "go.mod and cmd/kindctl/main.go found"
        shell: bash

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get tag version
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        shell: bash

      - name: Determine default branch
        id: branch
        run: |
          DEFAULT_BRANCH=$(git ls-remote --heads origin | grep -E 'refs/heads/(main|master)$' | awk '{print $2}' | cut -d'/' -f3)
          if [ -z "$DEFAULT_BRANCH" ]; then
            echo "Error: Could not determine default branch (main or master)"
            exit 1
          fi
          echo "DEFAULT_BRANCH=$DEFAULT_BRANCH" >> $GITHUB_ENV
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        shell: bash

      - name: Checkout default branch
        run: |
          git checkout ${{ env.DEFAULT_BRANCH }}
          git pull origin ${{ env.DEFAULT_BRANCH }}
        shell: bash

      - name: Build binary
        run: |
          case "${{ matrix.os }}" in
            windows-latest)
              BINARY="kindctl-windows-${{ matrix.arch }}.exe"
              GOOS="windows"
              ;;
            macos-latest)
              BINARY="kindctl-darwin-${{ matrix.arch }}"
              GOOS="darwin"
              ;;
            ubuntu-latest)
              BINARY="kindctl-linux-${{ matrix.arch }}"
              GOOS="linux"
              ;;
          esac
          mkdir -p bin
          GOARCH=${{ matrix.arch }} go build -o bin/$BINARY ./cmd/kindctl
        env:
          CGO_ENABLED: 0
        shell: bash

      - name: Create release directory
        run: |
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/* releases/download/${{ env.VERSION }}/
        shell: bash

      - name: Copy install scripts
        run: |
          cp scripts/install.sh releases/download/${{ env.VERSION }}/
          cp scripts/install.ps1 releases/download/${{ env.VERSION }}/
        shell: bash

      - name: Commit release assets
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add releases/download/${{ env.VERSION }}
          git commit -m "Add release assets for ${{ env.VERSION }}" || echo "No changes to commit"
          git push origin ${{ env.DEFAULT_BRANCH }}
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        shell: bash

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            releases/download/${{ env.VERSION }}/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}