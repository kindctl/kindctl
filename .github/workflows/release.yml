name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          path: kindctl

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get tag version
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        working-directory: kindctl
        shell: bash

      - name: Install zip on Windows
        if: matrix.os == 'windows-latest'
        run: choco install zip
        shell: powershell

      - name: Build and package binary
        run: |
          set -e
          
          case "${{ matrix.os }}" in
            windows-latest)
              EXT=".exe"
              OS_NAME="windows"
              ;;
            macos-latest)
              EXT=""
              OS_NAME="darwin"
              ;;
            ubuntu-latest)
              EXT=""
              OS_NAME="linux"
              ;;
          esac
          
          BINARY="kindctl-${OS_NAME}-${{ matrix.arch }}${EXT}"
          ARCHIVE="${BINARY%.*}"
          
          echo "üõ† Building $BINARY..."
          mkdir -p bin
          GOARCH=${{ matrix.arch }} GOOS=$OS_NAME CGO_ENABLED=0 go build -o bin/$BINARY ./cmd/kindctl
          
          echo "üì¶ Packaging $ARCHIVE..."
          cd bin
          if [[ "$EXT" == ".exe" ]]; then
            zip "${ARCHIVE}.zip" "$BINARY"
          else
            tar -czvf "${ARCHIVE}.tar.gz" "$BINARY"
          fi
          cd ..
          
          echo "üìÅ Moving archive to release directory..."
          mkdir -p releases/download/v0.0.0
          mv bin/*.zip bin/*.tar.gz releases/download/v0.0.0/ || true
          ls -la releases/download/v0.0.0/
        working-directory: kindctl
        shell: bash

      - name: Verify installer works
        run: |
          echo "üîç Verifying binary functionality..."
          
          case "${{ matrix.os }}" in
            windows-latest)
              BINARY="./bin/kindctl-windows-${{ matrix.arch }}.exe"
              ;;
            macos-latest)
              BINARY="./bin/kindctl-darwin-${{ matrix.arch }}"
              ;;
            ubuntu-latest)
              BINARY="./bin/kindctl-linux-${{ matrix.arch }}"
              ;;
          esac
          
          echo "‚ñ∂ Running $BINARY --version"
          $BINARY --version || (echo "‚ùå $BINARY --version failed" && exit 1)
          
          echo "‚ñ∂ Running $BINARY --help"
          $BINARY --help || (echo "‚ùå $BINARY --help failed" && exit 1)
          
          echo "‚úÖ $BINARY passed verification."
        working-directory: kindctl
        shell: bash

      - name: Create release directory
        run: |
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/* releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Copy install scripts
        run: |
          cp scripts/install.sh releases/download/${{ env.VERSION }}/
          cp scripts/install.ps1 releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Commit release assets
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add releases/download/${{ env.VERSION }}
          git commit -m "Add release assets for ${{ env.VERSION }}" || echo "No changes to commit"
          git pull --rebase origin "$GITHUB_REF_NAME"
          git push origin "$GITHUB_REF_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        working-directory: kindctl
        shell: bash