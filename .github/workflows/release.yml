name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
        arch: [ amd64, arm64 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          path: kindctl

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get tag version
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        working-directory: kindctl
        shell: bash

      - name: Install zip on Windows
        if: matrix.os == 'windows-latest'
        run: choco install zip
        shell: powershell

      - name: Build and package binary
        run: |
          set -e
          
          case "${{ matrix.os }}" in
            windows-latest)
              EXT=".exe"
              OS_NAME="windows"
              ;;
            macos-latest)
              EXT=""
              OS_NAME="darwin"
              ;;
            ubuntu-latest)
              EXT=""
              OS_NAME="linux"
              ;;
          esac
          
          BINARY="kindctl-${OS_NAME}-${{ matrix.arch }}${EXT}"
          ARCHIVE="${BINARY%.*}"
          
          echo "üõ† Building $BINARY..."
          mkdir -p bin
          GOARCH=${{ matrix.arch }} GOOS=$OS_NAME CGO_ENABLED=0 go build -ldflags "-X main.version=${{ env.VERSION }}" -o bin/$BINARY ./cmd/kindctl
          
          echo "üì¶ Packaging $ARCHIVE..."
          cd bin
          if [[ "$EXT" == ".exe" ]]; then
            zip "${ARCHIVE}.zip" "$BINARY"
          else
            tar -czvf "${ARCHIVE}.tar.gz" "$BINARY"
          fi
          cd ..
          
          echo "üìÅ Moving archive to release directory..."
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/*.zip bin/*.tar.gz releases/download/${{ env.VERSION }}/ || true
          ls -la releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: üèó Setup QEMU for multi-arch Docker
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3

#      - name: ‚úÖ Verify Linux binaries using Docker (QEMU)
#        if: runner.os == 'Linux'
#        run: |
#          echo "üîç Verifying Linux binaries for ${{ matrix.arch }}"
#          if [[ "${{ matrix.arch }}" == "arm64" ]]; then
#            echo "‚ñ∂ Running kindctl-linux-arm64 inside ARM64 Docker container..."
#            docker run --rm --platform linux/arm64 -v $PWD:/workspace -w /workspace ubuntu:22.04 \
#              bash -c "./bin/kindctl-linux-arm64 --version && ./bin/kindctl-linux-arm64 --help"
#          else
#            echo "‚ñ∂ Running kindctl-linux-amd64 inside AMD64 Docker container..."
#            docker run --rm --platform linux/amd64 -v $PWD:/workspace -w /workspace ubuntu:latest \
#              bash -c "./bin/kindctl-linux-amd64 --version && ./bin/kindctl-linux-amd64 --help"
#          fi
#        shell: bash
#        working-directory: kindctl
#
#
#      - name: ‚úÖ Verify MacOs binaries
#        if: runner.os == 'macOS'
#        run: |
#          echo "üîç Verifying macOS binary for ${{ matrix.arch }}..."
#          chmod +x ./bin/kindctl-darwin-${{ matrix.arch }}
#          ./bin/kindctl-darwin-${{ matrix.arch }} --version
#          ./bin/kindctl-darwin-${{ matrix.arch }} --help
#        working-directory: kindctl
#        shell: bash
#
#      - name: ‚úÖ Verify Windows binaries
#        if: runner.os == 'Windows'
#        run: |
#          Write-Host "Verifying Windows binary for ${{ matrix.arch }}..."
#          if ("${{ matrix.arch }}" -eq "amd64") {
#              .\bin\kindctl-windows-amd64.exe --version
#              .\bin\kindctl-windows-amd64.exe --help
#          } else {
#            Write-Host "Skipping ARM64 binary verification for Windows since it is not natively supported."
#          }
#        working-directory: kindctl
#        shell: pwsh

      - name: Create release directory
        run: |
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/* releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Copy install scripts
        run: |
          cp scripts/install.sh releases/download/${{ env.VERSION }}/
          cp scripts/install.ps1 releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Commit release assets
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Ensure we pull the latest changes from main
          git fetch origin
          git checkout main
          git pull origin main

          # Create a new release branch based on the main branch
          RELEASE_BRANCH="release/${{ env.VERSION }}"
          git checkout -b "$RELEASE_BRANCH"

          # Add and commit release assets
          git add releases/download/${{ env.VERSION }}
          git commit -m "Add release assets for ${{ env.VERSION }}" || echo "No changes to commit"

          # Push the release branch to GitHub
          git push --set-upstream origin "$RELEASE_BRANCH"

          # Create a pull request to the main branch
          PR_URL=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d '{"title":"Release ${{ env.VERSION }}","head":"'"$RELEASE_BRANCH"'","base":"main"}' \
            https://api.github.com/repos/kindctl/kindctl/pulls | jq -r .url)

          echo "PR created: $PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        working-directory: kindctl
        shell: bash
