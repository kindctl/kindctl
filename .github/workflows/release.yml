name: Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PAT_TOKEN }}
          path: kindctl

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Get tag version
        id: tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        working-directory: kindctl
        shell: bash

      - name: Install zip on Windows
        if: matrix.os == 'windows-latest'
        run: choco install zip
        shell: powershell

      - name: Build and package binary
        run: |
          set -e
          
          case "${{ matrix.os }}" in
            windows-latest)
              EXT=".exe"
              OS_NAME="windows"
              ;;
            macos-latest)
              EXT=""
              OS_NAME="darwin"
              ;;
            ubuntu-latest)
              EXT=""
              OS_NAME="linux"
              ;;
          esac
          
          BINARY="kindctl-${OS_NAME}-${{ matrix.arch }}${EXT}"
          ARCHIVE="${BINARY%.*}"
          
          echo "üõ† Building $BINARY..."
          mkdir -p bin
          GOARCH=${{ matrix.arch }} GOOS=$OS_NAME CGO_ENABLED=0 go build -ldflags "-X main.version=${{ env.VERSION }}" -o bin/$BINARY ./cmd/kindctl
          
          echo "üì¶ Packaging $ARCHIVE..."
          cd bin
          if [[ "$EXT" == ".exe" ]]; then
            zip "${ARCHIVE}.zip" "$BINARY"
          else
            tar -czvf "${ARCHIVE}.tar.gz" "$BINARY"
          fi
          cd ..
          
          echo "üìÅ Moving archive to release directory..."
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/*.zip bin/*.tar.gz releases/download/${{ env.VERSION }}/ || true
          ls -la releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Verify binary functionality
        run: |
          echo "üîç Verifying binary functionality..."

          case "${{ matrix.os }}" in
            windows-latest)
              # On Windows, use Windows-based Docker image to test `windows-arm64` or `windows-amd64` binaries
              if [ "${{ matrix.arch }}" == "arm64" ]; then
                echo "‚ñ∂ Testing ARM64 binary on Windows..."
                # Use Windows container to test ARM64
                docker run --rm --privileged --platform windows/arm64 -v $PWD:/workspace -w /workspace mcr.microsoft.com/windows/servercore:ltsc2019 \
                  cmd /c "./bin/kindctl-windows-arm64.exe --version && ./bin/kindctl-windows-arm64.exe --help"
              else
                echo "‚ñ∂ Testing AMD64 binary on Windows..."
                # Use Windows container to test AMD64
                docker run --rm --platform windows/amd64 -v $PWD:/workspace -w /workspace mcr.microsoft.com/windows/servercore:ltsc2019 \
                  cmd /c "./bin/kindctl-windows-amd64.exe --version && ./bin/kindctl-windows-amd64.exe --help"
              fi
              ;;

            macos-latest)
              # For macOS, test ARM64 or AMD64 using a macOS Docker image
              if [ "${{ matrix.arch }}" == "arm64" ]; then
                echo "‚ñ∂ Testing ARM64 binary on macOS..."
                docker run --rm --privileged --platform darwin/arm64 -v $PWD:/workspace -w /workspace --entrypoint /bin/bash \
                  ghcr.io/linuxserver/iohook:latest -c "./bin/kindctl-darwin-arm64 --version && ./bin/kindctl-darwin-arm64 --help"
              else
                echo "‚ñ∂ Testing AMD64 binary on macOS..."
                docker run --rm --privileged --platform darwin/amd64 -v $PWD:/workspace -w /workspace --entrypoint /bin/bash \
                  ghcr.io/linuxserver/iohook:latest -c "./bin/kindctl-darwin-amd64 --version && ./bin/kindctl-darwin-amd64 --help"
              fi
              ;;

            ubuntu-latest)
              # On Ubuntu, use Ubuntu image to test both ARM64 and AMD64
              if [ "${{ matrix.arch }}" == "arm64" ]; then
                echo "‚ñ∂ Testing ARM64 binary on Ubuntu..."
                docker run --rm --privileged --platform linux/arm64/v8 -v $PWD:/workspace -w /workspace ubuntu:latest \
                  bash -c "./bin/kindctl-linux-arm64 --version && ./bin/kindctl-linux-arm64 --help"
              else
                echo "‚ñ∂ Testing AMD64 binary on Ubuntu..."
                docker run --rm --privileged --platform linux/amd64 -v $PWD:/workspace -w /workspace ubuntu:latest \
                  bash -c "./bin/kindctl-linux-amd64 --version && ./bin/kindctl-linux-amd64 --help"
              fi
              ;;
          esac
        working-directory: kindctl

      - name: Create release directory
        run: |
          mkdir -p releases/download/${{ env.VERSION }}
          mv bin/* releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Copy install scripts
        run: |
          cp scripts/install.sh releases/download/${{ env.VERSION }}/
          cp scripts/install.ps1 releases/download/${{ env.VERSION }}/
        working-directory: kindctl
        shell: bash

      - name: Commit release assets
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add releases/download/${{ env.VERSION }}
          git commit -m "Add release assets for ${{ env.VERSION }}" || echo "No changes to commit"
          git pull --rebase origin "$GITHUB_REF_NAME"
          git push origin "$GITHUB_REF_NAME"
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        working-directory: kindctl
        shell: bash